<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dart on Andra Satria Pratama</title>
    <link>https://andrasatriapratama.com/tags/dart/</link>
    <description>Recent content in dart on Andra Satria Pratama</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright>
    <lastBuildDate>Sun, 25 Sep 2022 00:12:22 +0700</lastBuildDate><atom:link href="https://andrasatriapratama.com/tags/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Paradigma OOP Pada Dart</title>
      <link>https://andrasatriapratama.com/dart/paradigma-oop-pada-dart/</link>
      <pubDate>Sun, 25 Sep 2022 00:12:22 +0700</pubDate>
      
      <guid>https://andrasatriapratama.com/dart/paradigma-oop-pada-dart/</guid>
      <description>Encapsulation Encapsulation (Enkapsulasi) merupakan cara untuk mengatur Property (variabel) dan Method (fungsi) dengan menyembunyikan alur kerja atau membatasi aksesnya di dalam class. Sederhanya, kita bisa menentukan Property atau Method mana yang bisa diakses langsung atau tidak. Di dalam bahasa pemrograman Dart ada 2 jenisnya yaitu, private dan public. private berati hanya bisa diakses di dalam classnya, sedangkan public bisa diakses di luar classnya.
Abstraction Abstraction (Abstraksi) erupakan cara untuk membuat class yang sifatnya private.</description>
    </item>
    
    <item>
      <title>Class</title>
      <link>https://andrasatriapratama.com/dart/class/</link>
      <pubDate>Thu, 01 Sep 2022 00:11:22 +0700</pubDate>
      
      <guid>https://andrasatriapratama.com/dart/class/</guid>
      <description>Class merupakan blueprint atau cetak biru untuk membuat suatu objek. Misalkan kita mau membuat sebuah Application Bar atau Appbar pada sebuah aplikasi mobile. Kita bisa membuatnya seperti ini class AppBar { String nama; int tinggi; String warna; AppBar(this.nama, this.tinggi, this.warna); void create() { print( &amp;#39;Aplikasi $nama ini memiliki Appbar ini tingginya $tinggi dan warnanya $warna&amp;#39;); } }
kemudian kita coba gunakan class tersebut dan jalankan void main(List&amp;lt;String&amp;gt; arguments) { var appBar = AppBar(&amp;#39;Instagram&amp;#39;, 20, &amp;#39;green&amp;#39;); appBar.</description>
    </item>
    
    <item>
      <title>Property</title>
      <link>https://andrasatriapratama.com/dart/property/</link>
      <pubDate>Thu, 01 Sep 2022 00:10:22 +0700</pubDate>
      
      <guid>https://andrasatriapratama.com/dart/property/</guid>
      <description>Property merupakan variabel yang dimiliki oleh sebuah Class. Dalam Class Appbar yang sudah dibuat sebelumnya kita punya property nama, tinggi dan warna. class AppBar { // property String nama; int tinggi; String warna; AppBar(this.nama, this.tinggi, this.warna); void create() { print( &amp;#39;Aplikasi $nama ini memiliki Appbar ini tingginya $tinggi dan warnanya $warna&amp;#39;); } }</description>
    </item>
    
    <item>
      <title>Method</title>
      <link>https://andrasatriapratama.com/dart/method/</link>
      <pubDate>Thu, 01 Sep 2022 00:09:22 +0700</pubDate>
      
      <guid>https://andrasatriapratama.com/dart/method/</guid>
      <description>Method merupakan fungsi yang dimiliki oleh sebuah Class. Dalam Class Appbar yang sudah dibuat sebelumnya kita punya method dengan nama create(). class AppBar { // property String nama; int tinggi; String warna; AppBar(this.nama, this.tinggi, this.warna); // method void create() { print( &amp;#39;Aplikasi $nama ini memiliki Appbar ini tingginya $tinggi dan warnanya $warna&amp;#39;); } }</description>
    </item>
    
    <item>
      <title>Constructor</title>
      <link>https://andrasatriapratama.com/dart/constructor/</link>
      <pubDate>Thu, 01 Sep 2022 00:08:22 +0700</pubDate>
      
      <guid>https://andrasatriapratama.com/dart/constructor/</guid>
      <description>Constructor merupakan fungsi yang pertama kali dipanggil ketika sebuah objek dibuat. Dalam Class Appbar yang sudah dibuat sebelumnya kita punya Constructor yang namanya sama persis dengan nama Classnya. class AppBar { // property String nama; int tinggi; String warna; // constructor AppBar(this.nama, this.tinggi, this.warna); // method void create() { print( &amp;#39;Aplikasi $nama ini memiliki Appbar ini tingginya $tinggi dan warnanya $warna&amp;#39;); } }</description>
    </item>
    
    <item>
      <title>Cascade Notation</title>
      <link>https://andrasatriapratama.com/dart/cascade-notation/</link>
      <pubDate>Thu, 01 Sep 2022 00:07:22 +0700</pubDate>
      
      <guid>https://andrasatriapratama.com/dart/cascade-notation/</guid>
      <description>Dengan Cascade Notation (cascade operator), kita bisa melakukan operasi pada objek secara berurutan. Kita bisa akses dan jalankan property dan methodnya bersamaan saat membuat atau menginstansi objeknya. Contohnya sebagai berikut void main(List&amp;lt;String&amp;gt; arguments) { // contoh penggunaan cascade notation var appBar = AppBar(&amp;#39;&amp;#39;, 0, &amp;#39;&amp;#39;) ..nama = &amp;#39;Instagram&amp;#39; ..tinggi = 20 ..warna = &amp;#39;putih&amp;#39; ..create(); } class AppBar { String nama; int tinggi; String warna; AppBar(this.nama, this.tinggi, this.warna); void create() { print( &amp;#39;Aplikasi $nama ini memiliki Appbar ini tingginya $tinggi dan warnanya $warna&amp;#39;); } } hasilnya</description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://andrasatriapratama.com/dart/inheritance/</link>
      <pubDate>Thu, 01 Sep 2022 00:06:22 +0700</pubDate>
      
      <guid>https://andrasatriapratama.com/dart/inheritance/</guid>
      <description>Inheritance adalah cara dari suatu class agar bisa mewarisi sifat dari class lain. Class yang mewarisi sifat seperti property dan methodnya adalah SuperClass atau Parent Class, sedangkan Class yang diwarisi adalah Subclass atau Child Class. Contohnya seperti dibawah ini menginstansi objeknya. Contohnya sebagai berikut void main(List&amp;lt;String&amp;gt; arguments) { var appBarHome = AppBarHome(&amp;#39;Instagram&amp;#39;, 20, &amp;#39;putih&amp;#39;, &amp;#39;klik profil&amp;#39;); // memanggil fungsi dari class AppBar appBarHome.create(); // memanggil fungsi dari class AppBarHome itu sendiri appBarHome.</description>
    </item>
    
  </channel>
</rss>
